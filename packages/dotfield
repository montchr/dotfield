#!/usr/bin/env bash
#
# dotfield
#
# Nix flake shortcuts.
#
# Usage:
#   dotfield <subcommand> [<args>...]
#   dotfield build [<flake-output>]
#   dotfield switch [<flake-output>]
#   dotfield evolve [<flake-output>]
#   dotfield repl [<flake-output>]

set -e

if [[ -z $DOTFIELD_DIR ]]; then
  echo '$DOTFIELD_DIR not defined! Exiting.'
  exit 1
fi

# shellcheck source=../lib/utils.sh
. "${DOTFIELD_DIR}/lib/utils.sh"

#========================================
# Get an absolute path to a system flake output.
#
# Usage:
#   host::flakePath <host-name>
# Arguments:
#   Hostname.
# Globals:
#   DOTFIELD_DIR
#========================================
function host::flakePath() {
  local hostName=$1
  printf "%s/#%s" "${DOTFIELD_DIR}" "${hostName}"
}

#========================================
# Get the flake output path for the specified host.
#
# Usage:
#   host::flakeOutput <hostName>
# Arguments:
#   Host name.
# Globals:
#   KERNEL_NAME
# Outputs:
#   Flake output path for a host build.
#========================================
function host::flakeOutput() {
  local hostName="$1"
  [[ -z "${hostName}" ]] \
    && msg::error "[dotfield::host::flakeOutput] Host name was not specified."
  local outputBase
  case "${KERNEL_NAME}" in
    linux) outputBase="nixosConfigurations" ;;
    darwin) outputBase="darwinConfigurations" ;;
    *) msg::error "Something went VERY wrong! Unable to detect kernel name." ;;
  esac
  echo "${outputBase}.${hostName}.config.system.build.toplevel"
}

#========================================
# Output the current hostname, with fallback approaches.
#
# Usage:
#   host::name
# Globals:
#   DOTFIELD_HOSTNAME
#   HOSTNAME
#========================================
function host::name() {
  echo "${DOTFIELD_HOSTNAME:-${HOSTNAME:-$(hostname)}}"
}

#========================================
# Build a specified flake output.
#
# Usage:
#   host::build <hostname> [<args>...]
# Arguments:
#   Hostname.
#   Additional args.
#========================================
function host::build() {
  local name="$1"
  shift

  local outputPath
  local flakePath
  outputPath="$(host::flakeOutput "${name}")"
  flakePath="$(host::flakePath "${outputPath}")"

  nix build --verbose \
    "${flakePath}" \
    "$@"
}

#========================================
# Switch to a new generation of the system flake.
#
# Usage:
#   host::switch <name> [<args>...]
# Arguments:
#   Hostname.
#   Args to pass to the switch command.
# Globals:
#   DOTFIELD_DIR
#========================================
function host::switch() {
  local name="$1"
  shift

  local outputPath
  local flakePath

  case "${KERNEL_NAME}" in
    linux)
      outputPath="$(host::flakeOutput "${name}")"
      flakePath="$(host::flakePath "${outputPath}")"
      sudo nixos-rebuild switch "${flakePath}"
      ;;
    darwin)
      flakePath="$(host::flakePath "${name}")"
      "${DOTFIELD_DIR}/result/sw/bin/darwin-rebuild" switch \
        --verbose --flake \
        "${flakePath}" \
        "$@"
      ;;
    *) msg::error "[dotfield::host::switch] Unable to detect kernel name." ;;
  esac

  [[ $? ]] || {
    msg::error "[dotfield::host::switch] Failed to switch to the new generation!"
  }

}

#========================================
# Whether a given string indicates a dark interface.
#
# Usage:
#   theme::is_dark <value>
# Arguments:
#   String to test
# Returns:
#   0 - Dark
#   1 - Light
#   2 - Invalid test value
#========================================
function theme::is_dark() {
  case "$1" in
    on | dark) return 0 ;;
    off | light) return 1 ;;
    *)
      msg::error "[theme::is_dark] Invalid option specified: ${1}"
      return 2
      ;;
  esac
}

#========================================
# Switch to a different system UI theme.
#
# Note: this function calls the main function recursively
#
# Usage:
#   theme::switch ( light | dark | <theme-name> )
# Arguments:
#   Either "light", "dark", or a theme name.
#========================================
function theme::switch() {
  local name=$1
  if theme::is_dark "${name}"; then
    DOTFIELD_THEME="black-metal-khold"
  else
    DOTFIELD_THEME="grayscale-light"
  fi
  export DOTFIELD_THEME
  host::switch "$(host::name)" --impure
}


#========================================
# Entry point.
#========================================
function main() {
  local subcommand="$1"
  local hostName

  shift

  hostName="$(host::name)"

  case "${subcommand}" in
    build)
      msg::domain "Evolution" "Building '${hostName}'"
      host::build "${hostName}" "$@"
      ;;

    switch)
      msg::domain "Evolution" "Switching to new generation"
      host::switch "${hostName}" "$@"
      ;;

    evolve)
      msg::domain "Evolution" "Building '${hostName}'"
      host::build "${hostName}" "$@"

      msg::domain "Evolution" "Switching to new generation"
      host::switch "${hostName}" "$@"
      ;;

    repl)
      msg::domain "Introspection" "Launching REPL"
      # Use flake-utils-plus REPL shell
      repl "${DOTFIELD_DIR}"
      ;;

    theme)
      local theme="$1"
      msg::domain "Visualisation" "Changing color theme to '${theme}'"
      theme::switch "$@"
      ;;

    *)
      msg::error "[Error] Invalid subcommand ${subcommand}! Aborting."
      return 1
      ;;
  esac
}

main "$@"
