#!/usr/bin/env bash

set -e

readonly GITHUB_REPOSITORY="montchr/dots"
readonly DOTFILES_ORIGIN="git@github.com:$GITHUB_REPOSITORY.git"
readonly DOTFILES_BRANCH="${CDOM_INIT_DOTFILES_BRANCH:-main}"
readonly DOTFILES_TARBALL_URL="https://github.com/$GITHUB_REPOSITORY/tarball/${DOTFILES_BRANCH}"
readonly DOTFILES_UTILS_URL="https://raw.githubusercontent.com/$GITHUB_REPOSITORY/${DOTFILES_BRANCH}/lib/utils.sh"

DOTFILES_DIR="${HOME}/.dots"
SKIP_QUESTIONS=0


# ----------------------------------------------------------------------
# | Helper Functions                                                   |
# ----------------------------------------------------------------------

# Download file from a URL.
# Parameters:
#   URL
#   Output path
function download () {
  local url="$1"
  local output="$2"
  if command -v "curl" &>/dev/null; then
    curl -LsSo "$output" "$url" &>/dev/null
    return $?
  elif command -v "wget" &>/dev/null; then
    wget -qO "$output" "$url" &>/dev/null
    return $?
  fi
  return 1
}

# Download the dotfiles repo.
# Globals:
#   SKIP_QUESTIONS
# Arguments:
#   Download method. Can be either `archive` or `git`.
function download_dotfiles () {
  local tmp_file=""

  tmp_file="$(mktemp /tmp/XXXXX)"
  download "$DOTFILES_TARBALL_URL" "$tmp_file"
  print_result $? "Download archive" "true"
  printf "\n"

  if ! (( SKIP_QUESTIONS )); then
    ask_for_confirmation "Do you want to store the dotfiles in '$DOTFILES_DIR'?"
    if ! user_confirmed; then
      DOTFILES_DIR=""
      while [ -z "$DOTFILES_DIR" ]; do
        ask "Please specify another location for the dotfiles (path): "
        DOTFILES_DIR="$(get_answer)"
      done
    fi

    # Ensure the `dotfiles` directory is available
    while [ -e "$DOTFILES_DIR" ]; do
      ask_for_confirmation "'$DOTFILES_DIR' already exists, do you want to overwrite it?"
      if user_confirmed; then
        rm -rf "$DOTFILES_DIR"
        break
      else
        DOTFILES_DIR=""
        while [ -z "$DOTFILES_DIR" ]; do
          ask "Please specify another location for the dotfiles (path): "
          DOTFILES_DIR="$(get_answer)"
        done
      fi
    done

    printf "\n"
  else
    rm -rf "$DOTFILES_DIR" &>/dev/null
  fi

  mkdir -p "${DOTFILES_DIR}"
  print_result $? "Create '$DOTFILES_DIR'" "true"

  # Extract archive in the `dotfiles` directory.
  extract "$tmp_file" "$DOTFILES_DIR"
  print_result $? "Extract archive" "true"

  rm -rf "$tmp_file"
  print_result $? "Remove archive file"

  cd "${DOTFILES_DIR}"
  print_result $? "cd ${DOTFILES_DIR}"
  return $?
}

function download_utils () {
  local tmp_file=""
  tmp_file="$(mktemp /tmp/XXXXX)"

  download "$DOTFILES_UTILS_URL" "$tmp_file" && {
    # shellcheck disable=SC1090
    . "$tmp_file" && rm -rf "$tmp_file"
  } && return 0

  return 1
}

function extract () {
  local archive="$1"
  local outputDir="$2"
  if command -v "tar" &>/dev/null; then
    tar -zxf "$archive" --strip-components 1 -C "$outputDir"
    return $?
  fi
  return 1
}

function verify_os () {
  declare -r MINIMUM_MACOS_VERSION="10.10"
  # @TODO handle debian!
  declare -r MINIMUM_UBUNTU_VERSION="20.04"

  local os_name
  local os_version
  os_name="$(get_os)"
  os_version="$(get_os_version)"

  # Check if the OS is macOS and it's above the required version.
  if [ "$os_name" == "macos" ]; then
    if is_supported_version "$os_version" "$MINIMUM_MACOS_VERSION"; then
      return 0
    else
      printf "Sorry, this script is intended only for macOS %s+" "$MINIMUM_MACOS_VERSION"
    fi

    # Check if the OS is `Ubuntu` and it's above the required version.
  elif [ "$os_name" == "ubuntu" ]; then
    if is_supported_version "$os_version" "$MINIMUM_UBUNTU_VERSION"; then
      return 0
    else
      printf "Sorry, this script is intended only for Ubuntu %s+" "$MINIMUM_UBUNTU_VERSION"
    fi
  else
    printf "Sorry, this script is intended only for macOS and Ubuntu!"
  fi

  return 1
}

# Whether the bootstrap script should skip questions.
# Uses:
#   is_interactive
#   is_ci
# Globals:
#   CDOM_INIT_INTERACTIVE
function .should_skip_questions() {
  [[ "false" == "${CDOM_INIT_INTERACTIVE}" ]] && return 0
  ! is_interactive && return 0
  is_ci && return 0

  while :; do
    case $1 in
      -y | --yes) return 0 ;;
      *) break ;;
    esac
    shift 1
  done
  return 1
}

# Initialize dotfiles git repo in place.
# Globals:
#   DOTFILES_ORIGIN
function init_git_repo () {
  # @TODO set up branch tracking and submodules
  git init && git remote add origin "${DOTFILES_ORIGIN}"
}

# Run configuration script, if available.
# Globals:
#   CDOM_INIT_HOSTNAME
function .do_configure () {
  local hostname

  [[ -f os/$(get_os)/configure ]] \
    || print_warning "No configurator found for current OS '$(get_os)'! Continuing..." \
      && return

  if [[ -n "${CDOM_INIT_HOSTNAME}" ]]; then
    hostname="${CDOM_INIT_HOSTNAME}"
  else
    ask "Set the hostname: "
    hostname="$(get_answer)"
  fi

  # shellcheck disable=SC1090
  . "os/$(get_os)/configure" "${hostname:-CDOM}"
}

# ----------------------------------------------------------------------
# | Main                                                               |
# ----------------------------------------------------------------------

function main () {
  # Ensure that the following actions are made relative to this file's path.
  cd "$(dirname "${BASH_SOURCE[0]}")" ||
    exit 1

  # Load utils
  if [[ -x "lib/utils.sh" ]]; then
    . "lib/utils.sh" || exit 1
  else
    download_utils || exit 1
  fi

  # Ensure the OS is supported and above the minimum version.
  verify_os || exit 1

  .should_skip_questions "$@" \
    && SKIP_QUESTIONS=1 \
    && print_warning "Skipping questions!"

  if [[ "root" == $(whoami) ]]; then
    print_warning "Running as root!"
  else
    ask_for_sudo
  fi

  print_hed "Downloading Dotfiles repo"
  download_dotfiles

  if [[ $DOTFILES_DIR != "$(pwd)" ]]; then
    print_error "We seem to be lost in '$(pwd)'. Something went wrong!"
    return 1
  fi

  # shellcheck disable=SC1090
  print_hed "OS Essentials" \
    && . "os/$(get_os)/install" \
    && print_result $? "OS Essentials"

  print_hed "OS Preferences" \
    && .do_configure \
    && print_result $? "OS Preferences"

  # Initialize the dotfiles directory as a git repo for a non-root user.
  if [[ "root" != $(whoami) ]] && ! is_git_repository; then
    print_hed "Initializing Dotfiles"
    execute \
      "init_git_repo" \
      "Initialize the Git repository"
  fi

  print_hed "Bootstrapping complete!"

  if ! (( SKIP_QUESTIONS )); then
    print_hed "Restart"

    ask_for_confirmation "Do you want to restart? You probably should."
    printf "\n"

    if user_confirmed; then
      sudo shutdown -r now &> /dev/null
    fi
  fi
}

main "$@"
