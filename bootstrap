#!/usr/bin/env bash
#
#
#====\\\===\\===\\\===\\===\\\===\\===\\\===\\===\\\===\\===\\\===\\===\\\===>
#::   \\\
#:: ======>      DOTFIELD PROVISIONER        ○
#::   ///
#====///===//===///===//===///===//===///===//===///===//===///===//===///===>
#
#
# Thanks:
#   - https://github.com/d12frosted/environment
#   - https://github.com/alrra/dotfiles
#   - https://github.com/jasonheecs/ubuntu-server-setup
#

# shellcheck disable=2153
[[ -n "$ZSH_VERSION" ]] \
  && emulate -L bash


set -e


: "${DOTFIELD_HOSTNAME:=}"
: "${DOTFIELD_NIX_HOSTNAME:=${DOTFIELD_HOSTNAME}}"
: "${DOTFIELD_USERNAME:=montchr}"
: "${DOTFIELD_ID_EMAIL:=}"
: "${DOTFIELD_USER_PASSWORD:=}"
: "${DOTFIELD_SSH_PUBLIC_KEY:=}"
: "${DOTFIELD_PGP_KEY:=0x135EEDD0F71934F3}"
: "${DOTFIELD_TIMEZONE:=America/New_York}"

: "${USE_HTTPS:-true}"
: "${HOSTNAME:=${DOTFIELD_HOSTNAME}}"

DOTFIELD_BRANCH="${GITHUB_HEAD_REF:-${GITHUB_REF:-${DOTFIELD_BRANCH:-feature/nix-home-manager}}}"
DOTFIELD_BRANCH="${DOTFIELD_BRANCH#refs/heads/}"
readonly DOTFIELD_BRANCH

# TODO
# readonly QUERENT="${GITHUB_ACTOR:-montchr}"
readonly QUERENT="${DOTFIELD_USERNAME:-montchr}"
readonly REPO_ID="montchr/dots"
readonly DOTFIELD_RAW_BASE_URL="https://raw.githubusercontent.com/${REPO_ID}/${DOTFIELD_BRANCH}"
readonly DOTFIELD_LOCK_FILE="${XDG_CACHE_HOME:-${HOME}/.cache}/dotfield/dotfield.lock"

[[ -z "${DOTFIELD_NIX_HOSTNAME}" ]] \
  && DOTFIELD_NIX_HOSTNAME="$(hostname)"

: "${DOTFIELD:=${HOME}/.config}"
: "${XDG_CONFIG_HOME:=${DOTFIELD}}"
: "${XDG_BIN_HOME:=${HOME}/.local/bin}"

export \
  DOTFIELD \
  DOTFIELD_BRANCH \
  DOTFIELD_HOSTNAME \
  DOTFIELD_ID_EMAIL \
  DOTFIELD_NIX_HOSTNAME \
  DOTFIELD_SSH_PUBLIC_KEY \
  DOTFIELD_TIMEZONE \
  DOTFIELD_USER_PASSWORD \
  DOTFIELD_USERNAME \
  HOSTNAME \
  QUERENT \
  REPO_ID \
  XDG_BIN_HOME \
  XDG_CONFIG_HOME


#====\\\===\\===\\\===\\===\\\===\\===\\\===\\===\\\===\\===\\\===\\===\\\===>
#:
#:    ==>   HELPER FUNCTIONS
#:
#====///===//===///===//===///===//===///===//===///===//===///===//===///===>


#======================================
# Check for the existence of a command in the current shell environment.
#
# Copied from lib/utils.sh for bootstrapping
#
# Usage:
#   shell::has <command>...
#
# Arguments:
#   Commands...
#========================================
function shell::has {
  for cmd in "$@"; do
    command -v "${cmd}" >/dev/null 2>&1
  done
}


#========================================
# Download a remote file and make it executable.
#
# Copied from fetch::file in lib/utils.sh for bootstrapping.
#
# Usage:
#   fetch::file <path> <URL>
# Parameters:
#   Path to target file
#   Source URL
#========================================
function fetch::file {
  local target="$1"
  local url="$2"
  if shell::has curl; then
    curl --silent -o "${target}" "${url}"
    return $?
  elif shell::has wget; then
    wget -qO "${target}" "${url}" &>/dev/null
    return $?
  else
    return 1
  fi
  chmod a+x "${target}"
  hash -r
}


#========================================
# Fetch and source a remote file.
#
# Usage:
#   source_ephemeral <relative-path> [<url-base>]
# Arguments:
#   Relative path to file
# Returns:
#   0 - Sourcing succeeded.
#   1 - Sourcing failed.
#========================================
function source_ephemeral {
  local url="$1"
  local tmp_file=""
  tmp_file="$(mktemp "/tmp/${url##*/}.XXXX")"
  fetch::file "${tmp_file}" "${url}"
  # shellcheck disable=1090
  . "${tmp_file}"
}


#========================================
# Verify whether the current OS version is supported by this script.
#
# Globals:
#   OS_NAME
#   OS_VERSION
# Outputs:
#   Feedback on error.
# Returns:
#   0 - Supported.
#   1 - Unsupported.
#========================================
function verify_os {
  declare -A Names Versions
  local supported_version

  Names=(
    [macos]="macOS"
    [ubuntu]="Ubuntu"
  )

  Versions=(
    [macos]="10.10"
    [ubuntu]="20.04"
  )

  supported_version="${Versions[$OS_NAME]}"

  if [[ -z "$supported_version" ]]; then
    echo "Sorry, your OS is not supported!"
    return 1
  fi

  str::is_supported_version \
    "${OS_VERSION}" \
    "${supported_version}" \
      && return 0

  printf "Sorry, this script is intended only for %s %s+" \
    "${Names[$OS_NAME]}" \
    "${supported_version}"
  return 1
}


#====\\\===\\===\\\===\\===\\\===\\===\\\===\\===\\\===\\===\\\===\\===\\\===>
#:
#:    ==>  GUARDIANS
#:
#====///===//===///===//===///===//===///===//===///===//===///===//===///===>


#========================================
# Guard against a lesser optional domain.
#
# Usage:
#   guard::domain <domain> <message>
# Globals:
#   ALL
#   GUARD_<DOMAIN>
#   GUARD_IGNORE_<DOMAIN>
# Uses:
#   msg::domain__lesser
#   msg::domain__inactive
# Parameters:
#   Domain name. Used for message prefix and uppercased nameref.
#   Message.
# Outputs:
#   Domain-prefixed message indicating domain is enabled.
#   Domain-prefixed message indicating domain is disabled.
# Returns:
#   0 - Domain is enabled.
#   1 - Domain is disabled.
#========================================
function guard::domain {
  local domain=$1
  local key
  key=$(str::upper "${domain}")
  shift

  local message="$*"

  local guard_ref="GUARD_$key"
  local ignore_guard_ref="GUARD_IGNORE_$key"
  guard="${!guard_ref}"
  ignore_guard="${!ignore_guard_ref}"

  if [[ \
    ("${ALL}" == "true" || "${guard}" == "true") \
    && -z "${ignore_guard}" \
  ]]; then
    msg::domain__lesser "${domain}" "${message}"
    return 0
  else
    msg::domain__inactive "${domain}" "${message}"
    return 1
  fi
}

#========================================
# Guard for the `install` action.
#
# Usage:
#   guard::install && { ... }
# Globals:
#   ACTION
#========================================
function guard::install {
  [[ "$ACTION" == "install" ]]
  return
}


#========================================
# Guard for the `upgrade` action.
#
# Usage:
#   guard::upgrade && { ... }
# Globals:
#   ACTION
#========================================
function guard::upgrade {
  [[ "$ACTION" == "upgrade" ]]
  return
}


#========================================
# Guard for the `test` action.
#
# Usage:
#   guard::test && { ... }
# Globals:
#   ACTION
#========================================
function guard::test {
  [[ "$ACTION" == "test" ]]
  return
}


#========================================
# Guard for Linux systems.
#
# Usage:
#   guard::linux && { ... }
# Globals:
#   KERNEL_NAME
#========================================
function guard::linux {
  [[ "$KERNEL_NAME" == "linux" ]]
  return
}


#========================================
# Guard for Ubuntu.
#
# Usage:
#   guard::ubuntu && { ... }
# Globals:
#   OS_NAME
#========================================
function guard::ubuntu {
  [[ "$OS_NAME" == "ubuntu" ]]
  return
}


#========================================
# Guard for Arch Linux.
#
# Usage:
#   guard::arch && { ... }
# Globals:
#   OS_NAME
#========================================
function guard::arch {
  [[ "$OS_NAME" == "arch" ]]
  return
}


#========================================
# Guard for macOS.
#
# Usage:
#   guard::ubuntu && { ... }
# Globals:
#   OS_NAME
#========================================
function guard::macos {
  [[ "$OS_NAME" == "macos" ]]
  return
}


#========================================
# Guard for the root user.
#
# Usage:
#   guard::root && { ... }
# Globals:
#   USER
#========================================
function guard::root {
  [[ "${USER}" == "root" ]]
  return
}


#========================================
# Delete the bootstrap lockfile.
#
# Globals:
#   DOTFIELD_LOCK_FILE
#========================================
function lock__disengage {
  [[ -f "${DOTFIELD_LOCK_FILE}" ]] \
    && rm -rf "${DOTFIELD_LOCK_FILE}"
}


#====\\\===\\===\\\===\\===\\\===\\===\\\===\\===\\\===\\===\\\===\\===\\\===>
#:
#:    ==>   ERROR HANDLING + TRACEBACKS
#:
#====///===//===///===//===///===//===///===//===///===//===///===//===///===>
#
# https://docwhat.org/tracebacks-in-bash
#


trap _exit_trap EXIT
trap _err_trap ERR
__DID_TRACEBACK=f

function _exit_trap() {
  local _ec="$?"
  if [[ $_ec != 0 && ${__DID_TRACEBACK} != t ]]; then
    traceback 1
  fi
  lock__disengage
}

function _err_trap() {
  local _ec="$?"
  local _cmd="${BASH_COMMAND:-unknown}"
  traceback 1
  __DID_TRACEBACK=t
  echo "The command ${_cmd} exited with exit code ${_ec}." 1>&2
  lock__disengage
}

function traceback() {
  # Hide the traceback() call.
  local -i start=$((${1:-0} + 1))
  local -i end=${#BASH_SOURCE[@]}
  local -i i=0
  local -i j=0

  echo "Traceback (last called is first):" 1>&2
  for ((i = start; i < end; i++)); do
    j=$((i - 1))
    local function="${FUNCNAME[$i]}"
    local file="${BASH_SOURCE[$i]}"
    local line="${BASH_LINENO[$j]}"
    echo "     ${function}() in ${file}:${line}" 1>&2
  done
}


#====\\\===\\===\\\===\\===\\\===\\===\\\===\\===\\\===\\===\\\===\\===\\\===>
#:
#:    ==>   INITIALIZATION
#:
#====///===//===///===//===///===//===///===//===///===//===///===//===///===>


if [[ -f "${XDG_CONFIG_HOME}/lib/utils.sh" ]]
then

# shellcheck source=./lib/utils.sh
. "${XDG_CONFIG_HOME}/lib/utils.sh"

msg::stream::story <<END
We arrive at a well-travelled outcropping,
overlooking a familiar vista.

Let's get a closer look…
END

else

source_ephemeral "${DOTFIELD_RAW_BASE_URL}/lib/utils.sh"

msg::stream::story <<END
This world is beautiful, but dark.

Let's get our bearings and see what we can see
in the land below…
END

fi


msg::domain "System" "Verifying system state"
if shell::has pfetch; then
  pfetch
else
  msg::domain "System" "Summoning pfetch"
  source_ephemeral "$(repo::qualify_raw_url "gh" "montchr/pfetch" "master" "pfetch")"
fi


# Ensure the OS is supported and above the minimum version.
# @TODO validation function doesn't work for older versions of bash and neither do associative arrays
# verify_os || return 1


msg::domain "System" "Syncing dotfield"
msg::stream::story <<END
One cannot simply lift oneself up by one's own bootstraps...
END
repo::sync "${XDG_CONFIG_HOME}" "gh" "${REPO_ID}" "${DOTFIELD_BRANCH}" || exit 1


msg::domain "Travelling" "-> ${XDG_CONFIG_HOME}"
cd "${XDG_CONFIG_HOME}" || {
msg::stream::errors <<END
We seem to be lost in '$(pwd)'.
Something went wrong!

The world fades to black as we dematerialize…
END
exit 1
}


#====\\\===\\===\\\===\\===\\\===\\===\\\===\\===\\\===\\===\\\===\\===\\\===>
#:
#:    ==>   PREPARATION
#:
#====///===//===///===//===///===//===///===//===///===//===///===//===///===>


msg::domain "Supporting" "Defining variables"

ALL="true"
ACTION=""
case $1 in
  install|upgrade|test)
    ACTION=$1
    shift
    ;;
  *)
    if [[ -z "$1" ]]; then
      ACTION=install
    else
      msg::error "action '$1' is not supported"
      msg::info "supported actions are: install, upgrade, test"
      exit 1
    fi
    ;;
esac

POSITIONAL=()
while [[ $# -gt 0 ]]
do
  case "$1" in
    "") : ;;
    -*)
      key=$(str::upper "${1#-}")
      declare -rx "GUARD_IGNORE_${key}=true"
      ;;
    *)
      key=$(str::upper "$1")
      declare -rx "GUARD_${key}=true"
      ALL="false"
      ;;
  esac
  shift
done
set -- "${POSITIONAL[@]}" # restore positional parameters
export ALL
export ACTION


msg::domain "Supporting" "Checking for lockfile"

if [[ -f "${DOTFIELD_LOCK_FILE}" ]]
then

msg::stream::errors <<END
Yet another world is being shaped by Eru

One must either wait patiently
or embrace the horrors of the unknown
and manually delete the lockfile:

:: ${DOTFIELD_LOCK_FILE}
END

exit 1
fi

msg::domain "Supporting" "Engaging lock"
mkdir -p "$(dirname "${DOTFIELD_LOCK_FILE}")"
touch "${DOTFIELD_LOCK_FILE}"

# trap lock__disengage INT TERM EXIT


#====\\\===\\===\\\===\\===\\\===\\===\\\===\\===\\\===\\===\\\===\\===\\\===>
#:
#:    ==>   EXPECTATION
#:
#====///===//===///===//===///===//===///===//===///===//===///===//===///===>



guard::macos && {
  if ! shell::is_modern; then
    msg::domain "Packages" "Install Homebrew and modern Bash"
    # shellcheck source=./os/macos/_pre_install.sh
    . "${XDG_CONFIG_HOME}/os/macos/_pre_install.sh"
  fi
}


guard::install && {
  msg::domain "Hostname" "Set the system hostname" && {
    if [[ -n "${DOTFIELD_HOSTNAME}" ]]; then
      HOSTNAME="${DOTFIELD_HOSTNAME}"
    else
      msg::ask "Enter a name: "
      HOSTNAME="$(msg::get_answer)"
      DOTFIELD_NIX_HOSTNAME="${HOSTNAME}"
    fi
  }
}


guard::install &&  {
  guard::domain "Identity" "Fetching PGP key" && {
    gpg --recv-key "${DOTFIELD_PGP_KEY}"
  }
}


guard::install && {

  (shell::has nix nix-build nix-channel nix-env nix-shell) || {

    msg::domain "Nix" "Install Nix package manager"
    sh <(curl -L https://nixos.org/nix/install) \
      --darwin-use-unencrypted-nix-store-volume \
      --daemon \

    msg::subdomain "Sourcing /etc/bashrc for Nix additions"
    . /etc/bashrc

    msg::subdomain "Testing nix-shell"
    nix-shell -p nix-info --run "nix-info -m"

  }

  msg::domain "Nix" "Install experimental Nix Flakes" && {
    nix-env -iA nixpkgs.nixFlakes
    nix_flakes_feature_flag="experimental-features = nix-command flakes"
    if ! grep --quiet --fixed-strings "${nix_flakes_feature_flag}" /etc/nix/nix.conf; then
      msg::subdomain "Adding nix flakes feature flag to /etc/nix/nix.conf"
      echo "${nix_flakes_feature_flag}" | sudo tee -a /etc/nix/nix.conf
    fi
  }
}


guard::install && guard::macos {
  msg::domain "Nix" "Install nix-darwin" && {

    [[ -d ./result ]] && {
      msg::subdomain "Found existing ./result directory. Removing..."
      rm -rf ./result
    }

    # Although nix-darwin supports flakes, at the time of writing, the installer
    # does not. In order to install nix-darwin properly, it needs to be
    # installed for the first time via the installer.
    # See: https://github.com/LnL7/nix-darwin#flakes-experimental
    msg::subdomain "Building nix-darwin installer"
    nix-build https://github.com/LnL7/nix-darwin/archive/master.tar.gz -A installer || {

      msg::error "Encountered an error installing nix-darwin"
      cert_file="/etc/ssl/certs/ca-certificates.crt"

      msg::stream::info \
<<END

If you received a message like this:

> Problem with the SSL CA cert (path? access rights?) (77)

...then '${cert_file}' might be a dead symlink.

Try removing and re-linking it by running the following:

$ sudo rm ${cert_file}
$ sudo ln -s /nix/var/nix/profiles/default/etc/ssl/certs/ca-bundle.crt ${cert_file}

END

      exit 1

    }

    msg::subdomain "Running nix-darwin installer"
    ./result/bin/darwin-installer

    msg::subdomain "Sourcing '/etc/static/bashrc' for nix-darwin additions"
    . /etc/static/bashrc

}



msg::domain "Nix" "Build" && {

  guard::macos && {
    nix build "./#${DOTFIELD_NIX_HOSTNAME}" \
      && "${DOTFIELD}/result/sw/bin/darwin-rebuild" switch --flake "./#${DOTFIELD_NIX_HOSTNAME}"
  }

  guard::linux && {
    # TODO: does this work anywhere besides NixOS? (probably not)
    sudo nixos-rebuild switch --flake "./#${DOTFIELD_NIX_HOSTNAME}"
  }

}


msg::domain "Guardian" "Ensure directories exist"
fs::ensure_dir "${XDG_BIN_HOME}"
fs::ensure_dir "$DEVELOPER"
fs::ensure_dir "$HOME/org"
fs::ensure_dir "$HOME/org/gtd"
fs::ensure_dir "$HOME/org/mind"
fs::ensure_dir "$HOME/org/roam"


guard::domain "Repo" "Sync repos from Repofiles" && {
  fs::map_lines repo::sync "${XDG_CONFIG_HOME}/Repofile" || true
}


guard::domain "Link" "Link all files as defined in Linkfiles" && {
  fs::linkfile "${DOTFIELD}/Linkfile"
  for f in "${DOTFIELD}"/**/Linkfile; do
    fs::linkfile "$f";
  done
  for f in "${DOTFIELD}"/**/Linkfile."${KERNEL_NAME}"; do
    fs::linkfile "$f"
  done
}


# guard::domain "Link" "Link all files from module bin directories" && {

#   for f in "${DOTFIELD}/*/bin/*"; do
#     link "$f" "${XDG_BIN_HOME}/$(basename "$f")"
#   done

# }


#====\\\===\\===\\\===\\===\\\===\\===\\\===\\===\\\===\\===\\\===\\===\\\===>
#:
#:    ==>   INSTALLATION + CONFIGURATION
#:
#====///===//===///===//===///===//===///===//===///===//===///===//===///===>


guard::arch && {
  msg::domain "OS" "Installing Arch Linux environment"
  # shellcheck source=./os/arch/install
  . "${XDG_CONFIG_HOME}/os/arch/install"
}

guard::ubuntu && {
  msg::domain "OS" "Installing Ubuntu environment"
  # shellcheck source=./os/ubuntu/main
  . "${XDG_CONFIG_HOME}/os/ubuntu/main"
}

guard::macos && {

  msg::domain "OS" "Installing macOS environment"
  # shellcheck source=./os/macos/main
  . "${XDG_CONFIG_HOME}/os/macos/main"

  # msg::domain "OS" "Configuring macOS preferences"
  # "${XDG_CONFIG_HOME}/os/macos/configure"

}


guard::install && {
  msg::domain "Guardian" "Decrypting Dotfield secrets"
  if [[ $(gpg --list-secret-keys "${DOTFIELD_ID_EMAIL}" 2>/dev/null) ]]; then
    # Force transcrypt to run even if it thinks the working tree is dirty.
    # This seems to be a false positive. Regardless, we've already checked for
    # a dirty working tree so nothing should be lost at this point.
    transcrypt --yes --force --import-gpg="${XDG_CONFIG_HOME}/.transcrypt" || {
      msg::warning "Decryption failed. Have we been her before?"
    }
  else
    msg::error "The requisite GPG key was not found! Cannot decrypt the secrets of Dotfield..."
    shell::is_interactive && exit 1
  fi
}


guard::install && {
  msg::domain "Editor" "Installing Doom Emacs" && {
    [[ ! -d "${HOME}/.emacs.d" ]] && {
      git clone --depth 1 https://github.com/hlissner/doom-emacs "${HOME}/.emacs.d"
    }
    # TODO: the shell environment should reflect the user's login shell
    # environment, not the environment this script was run within. this might not
    # normally matter, but it could have a confusing effect if this was only run
    # during initial bootstrapping
    # ~/.emacs.d/bin/doom install
  }


  guard::domain "PHP" "Install Composer" && {
    # shellcheck source=./composer/install
    . "${XDG_CONFIG_HOME}/composer/install"
  }


  guard::domain "Espanso" "Install Espanso" && {
    # shellcheck source=./espanso/install
    . "${XDG_CONFIG_HOME}/espanso/install"
  }


  guard::domain "Firefox" "Install Tridactyl" && {
    # shellcheck source=./firefox/install_tridactyl
    . "${XDG_CONFIG_HOME}/firefox/install_tridactyl"
  }


  guard::macos && {
    guard::domain "Firefox" "Link user chrome directory into existing profiles" && {
      for dir in ~/Library/"Application Support"/Firefox/Profiles/*
      do
        fs::link "firefox/chrome" "${dir}/chrome"
      done
    }
  }
}


guard::upgrade && {
  # @TODO run in login shell! see previous note
  guard::domain "Emacs" "Upgrading Doom Emacs" && {
    doom upgrade
  }
}


guard::macos && {

  # guard::domain "skhd" "Patch skhd application PATH" && {
  #   shell::has skhd && {
  #     # @TODO update this?
  #     "${DOTFIELD}/bin/patch_skhd_path"
  #   }
  # }

  guard::domain "yabai" "Ensure scripting addition is installed" && {
    shell::has yabai && {
      if [[ $(csrutil status) == *enabled* ]]; then
        msg::error "System integrity protection is enabled! yabai cannot function properly. Skipping."
        msg::info "https://github.com/koekeishiya/yabai/wiki/Disabling-System-Integrity-Protection"
      else
        # reinstall the scripting addition
        sudo yabai --uninstall-sa
        sudo yabai --install-sa

        # load the scripting addition
        killall Dock || true

        sudo yabai --load-sa
      fi

      [[ $(csrutil status) == *disabled* ]] && {
        msg::error "System integrity protection is disabled! Your system is at risk!"
        msg::warning "Now that the yabai scripting addition has been installed, you should re-enable SIP."
        msg::info "https://github.com/koekeishiya/yabai/wiki/Disabling-System-Integrity-Protection"
      }
    }
  }

}


guard::arch && {

  guard::domain "xmonad" "Rebuild Xmonad configurations" && {

    msg::subdomain "Install xmonad" && (
      cd "$XDG_CONFIG_HOME/xmonad"
      stack --allow-different-user install || {
        notify send -a "Eru" -t "Failed to compile xmonad" -u critical
      }
    )

    msg::subdomain "Restart xmonad" && {
      if pgrep d12-xmonad; then
        msg::info "Found running instance of xmonad. Restarting..."
        d12-xmonad --restart
      else
        msg::info "No running instance of xmonad is found. Meh..."
      fi
    }

  }
}


#====\\\===\\===\\\===\\===\\\===\\===\\\===\\===\\\===\\===\\\===\\===\\\===>
#:
#:    ==>   REALIZATION
#:
#====///===//===///===//===///===//===///===//===///===//===///===//===///===>


msg::success "Bootstrapping complete!"

guard::install && {

  if ! shell::is_ci; then
    msg::warning "Restart!"
    msg::ask_for_confirmation "Restart?"

    if msg::is_confirmed; then
      sudo shutdown -r now &> /dev/null
    fi
  fi

}

exit
