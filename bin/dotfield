#!/usr/bin/env bash
#
# dotfield
#
# Usage:
#   dotfield <subcommand> [<args>...]
#   dotfield build [<flake-output>]
#   dotfield repl [<flake-output>]

set -e

# FIXME: change this to `$DOTFIELD_DIR` in https://github.com/montchr/dotfield/issues/21
DOTFIELD="$(git rev-parse --show-toplevel)"
DOTFIELD_DIR="${DOTFIELD}/dotfield"

# shellcheck source=../lib/utils.sh
. "${DOTFIELD_DIR}/lib/utils.sh"

#========================================
# Build the flake and switch to the new derivation.
#
# Arguments:
#   Flake output URI.
#========================================
function __nix::build() {
  local output="$1"

  msg::subdomain "Rebuilding...\n"
  nix build -v "${output}"

  msg::subdomain "Switching to new generation...\n"
  local rebuild="${DOTFIELD}/result/sw/bin/darwin-rebuild"

  [[ -e "${rebuild}" ]] && {
    "${rebuild}" switch -v --flake "${output}"
  }
}

#========================================
# Open a new Nix REPL shell for a flake output.
#
# Arguments:
#   Flake output name. Defaults to the current hostname.
#========================================
function __nix::repl() {
  local output="$1"
  local conf
  conf="$(mktemp)"

  msg::subdomain "Loading flake from ${output}..."

  output="darwinConfigurations.${output}"

  cat > "${conf}" << EOF
(builtins.getFlake (toString ${DOTFIELD})).${output}
EOF

  nix repl "${conf}"
}

#========================================
# Entry point.
#========================================
function main() {

  local SUBCOMMAND="$1"
  local FLAKE_OUTPUT

  FLAKE_OUTPUT="${2:-${HOSTNAME:-${HOST:-$(hostname)}}}"

  local flake_path="${DOTFIELD}/#${FLAKE_OUTPUT}"

  case $SUBCOMMAND in
    build)
      msg::domain "Evolution" "Rebuilding '${FLAKE_OUTPUT}'"
      __nix::build "${flake_path}"
      ;;

    repl)
      msg::domain "Introspection" "Launching REPL shell for ${FLAKE_OUTPUT}"
      # TODO: Add support for NixOS
      __nix::repl "${FLAKE_OUTPUT}"
      ;;

    *)
      msg::error "[Error] Invalid subcommand ${SUBCOMMAND}! Aborting."
      return 1
      ;;
  esac
}

main "$@"
