# -*- mode: sh; eval: (sh-set-shell "bash") -*-
#
# ~/.profile
#
# Core shell environment setup file.
#
# Ideally, this should be sourced by all shells as early as possible, as it sets
# important environment variables.
#
# Bash:  source within ~/.bash_profile
# ZSH:   source within ~/.zshenv (reloads on every prompt, so keep this file light!)
#


# Check whether a command exists.
has() {
  type "$1" >/dev/null 2>&1
}

# Detect the OS and export appropriate variables.
declare -x IS_LINUX IS_MAC
[[ $OSTYPE == linux* ]] && IS_LINUX=true
[[ $OSTYPE == darwin* ]] && IS_MAC=true


# - - - - - - - - - - - - - - - - - - - -
# Core Configuration
# - - - - - - - - - - - - - - - - - - - -

# Define XDG base directories before all others.
# https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html
export \
  XDG_CACHE_HOME=${XDG_CACHE_HOME:-${HOME}/.cache} \
  XDG_CONFIG_HOME=${XDG_CONFIG_HOME:-${HOME}/.config} \
  XDG_DATA_HOME=${XDG_DATA_HOME:-${HOME}/.local/share} \
  XDG_RUNTIME_DIR=${XDG_RUNTIME_DIR:-/tmp}

# Non-standard XDG-inspired locations
export \
  XDG_BIN_HOME=${XDG_BIN_HOME:-${HOME}/.local/bin} \
  XDG_LIB_HOME=${XDG_LIB_HOME:-${HOME}/.local/lib}

export \
  CACHEDIR="$XDG_CACHE_HOME" \
  DOTS="$HOME/.dots" \
  DOTS_BIN="${DOTS}/bin" \
  DOTFILES="$HOME/.dotfiles" \
  KITTY_CONFIG_DIRECTORY="${XDG_CONFIG_HOME}/kitty" \
  KITTY_SOCKET="unix:${XDG_RUNTIME_DIR}/kitty-socket" \
  TMPDIR=${TMPDIR:-${XDG_RUNTIME_DIR}}

if [[ $IS_LINUX ]]; then
  export \
    HOMEBREW_BUNDLE_FILE="${DOTS}/Brewfile.linux.bundle" \
    HOMEBREW_BUNDLE_CASK_SKIP=true \
    HOMEBREW_BUNDLE_MAS_SKIP=true
elif [[ $IS_MAC ]]; then
  export \
    HOMEBREW_BUNDLE_FILE="${DOTS}/Brewfile.darwin.bundle"
fi


# - - - - - - - - - - - - - - - - - - - -
# PATH Modifications
# - - - - - - - - - - - - - - - - - - - -

export PATH="$XDG_BIN_HOME:$HOME/bin:$DOTS/bin:$PATH"

# Required by Homebrew
export PATH="/usr/local/sbin:$PATH"
export PATH="/usr/local/bin:$PATH"
export PATH="/home/linuxbrew/.linuxbrew/bin:$PATH"

# Prefer GNU coreutils
export PATH="/usr/local/opt/coreutils/libexec/gnubin:$PATH"
export MANPATH="/usr/local/opt/coreutils/libexec/gnuman:$MANPATH"
# Prefer brew's sqlite3
export PATH="/usr/local/opt/sqlite/bin:$PATH"

# Doom Emacs
export PATH="$HOME/.emacs.d/bin:$PATH"


# - - - - - - - - - - - - - - - - - - - -
# - Personal Preferences
# - System Appearance
# - - - - - - - - - - - - - - - - - - - -

# typeset -A Cdom

# System editor settings.
export \
  EDITOR="emacsclient -cn" \
  GIT_EDITOR="$EDITOR" \
  SYSTEMD_EDITOR="$EDITOR"

export BASE16_THEME_DARK='black-metal-khold' \
  BASE16_THEME_LIGHT='grayscale-light' \
  YABAI_BORDER_DARK="000000" \
  YABAI_BORDER_LIGHT="ffffff" \
  YABAI_BORDER_WIDTH="4"

# Emacs-specific configuration.
export \
  CDOM_EMACS_THEME_DARK="modus-vivendi" \
  CDOM_EMACS_THEME_LIGHT="modus-operandi"

# Get the current OS appearance.
#
# Returns either "light" or "dark". Defaults to "dark".
cdom_os_appearance () {
  if [[ $SSH_CONNECTION && $CDOM_OS_APPEARANCE ]]; then
    echo "${CDOM_OS_APPEARANCE}"
  elif [[ $(has "dark-mode" && dark-mode status) == "off" ]]; then
    echo "light"
  else
    echo "dark"
  fi
}

# Select a color theme based on dark mode status.
#
# Accepts either on/dark or off/light. Defaults to a dark theme.
cdom_base16_theme () {
  case $1 in
    on | dark) echo ${BASE16_THEME_DARK} ;;
    off | light) echo ${BASE16_THEME_LIGHT} ;;
    *) echo ${BASE16_THEME_DARK} ;;
  esac
}

# Set the OS appearance by attempting to query the current status.
[[ -z $CDOM_OS_APPEARANCE ]] &&
  CDOM_OS_APPEARANCE="$(cdom_os_appearance)" &&
  export CDOM_OS_APPEARANCE

# Set the base16 theme based on OS appearance.
BASE16_THEME=$(cdom_base16_theme "$CDOM_OS_APPEARANCE") &&
  export BASE16_THEME

# Load Nix environment
# shellcheck disable=SC1090
[[ -e ${HOME}/.nix-profile/etc/profile.d/nix.sh ]] \
  && . "${HOME}/.nix-profile/etc/profile.d/nix.sh"
